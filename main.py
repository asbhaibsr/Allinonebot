import logging
import os
import time
import asyncio
from datetime import datetime, timedelta

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes,
)
from pymongo.errors import PyMongoError

from config import Config
from database import (
    initialize_database,
    get_user_data,
    update_user_activity,
    increment_user_downloads,
    add_premium_downloads,
    get_platform_premium_limit,
)
from downloaders import download_terabox, download_youtube, download_instagram
from keyboards import (
#    start_keyboard, # рдпрд╣ рдкрдВрдХреНрддрд┐ рдЯрд┐рдкреНрдкрдгреА рдХреА рдЧрдИ рдереА, рдЗрд╕реЗ рдРрд╕реЗ рд╣реА рд░рд╣рдиреЗ рджреЗрдВ
    main_menu_keyboard,
    premium_keyboard,
    channel_check_keyboard,
)

# рд▓реЙрдЧрд┐рдВрдЧ рдХреЙрдиреНрдлрд╝рд┐рдЧрд░ рдХрд░реЗрдВ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА рд╡рд░реНрддрдорд╛рди рдХрд╛рд░реНрд░рд╡рд╛рдИ рдХреЛ рдЯреНрд░реИрдХ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╡реИрд╢реНрд╡рд┐рдХ рд╕реНрдерд┐рддрд┐ ---
# рдпрд╣ рдЬрд╛рдирдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИ рдХрд┐ рдмреЙрдЯ рдХрд┐рд╕реА рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рдХреЗ рд▓рд┐рдП рд▓рд┐рдВрдХ рдХреА рдЙрдореНрдореАрдж рдХрд░ рд░рд╣рд╛ рд╣реИ рдпрд╛ рдирд╣реАрдВ
user_state = {} # {'user_id': 'platform_key'} рдЬреИрд╕реЗ: {123: 'terabox'}

# --- рдлрд╝рд╛рдЗрд▓ рд╣рдЯрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рд╕рд╣рд╛рдпрдХ рдлрд╝рдВрдХреНрд╢рди ---
async def delete_file_after_delay(file_path, delay_minutes, context: ContextTypes.DEFAULT_TYPE, chat_id, message_id):
    await asyncio.sleep(delay_minutes * 60)
    try:
        os.remove(file_path)
        logger.info(f"рдлрд╝рд╛рдЗрд▓ рд╣рдЯрд╛рдИ рдЧрдИ: {file_path}")
        await context.bot.send_message(chat_id=chat_id, text=f"тЪая╕П рдЖрдкрдХреА рдкрд┐рдЫрд▓реА рдбрд╛рдЙрдирд▓реЛрдб рдХреА рдЧрдИ рдлрд╝рд╛рдЗрд▓ (рдореИрд╕реЗрдЬ ID: {message_id}) рд╕рд░реНрд╡рд░ рд╕реЗ рдбрд┐рд▓реАрдЯ рдХрд░ рджреА рдЧрдИ рд╣реИред")
    except OSError as e:
        logger.error(f"рдлрд╝рд╛рдЗрд▓ {file_path} рд╣рдЯрд╛рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")
        await context.bot.send_message(chat_id=chat_id, text=f"тЪая╕П рдлрд╝рд╛рдЗрд▓ рдбрд┐рд▓реАрдЯ рдХрд░рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИ: {e}")


# --- рдХрдорд╛рдВрдб рд╣реИрдВрдбрд▓рд░реНрд╕ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_name = update.effective_user.full_name
    logger.info(f"рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ {user_id} ({user_name}) рдиреЗ рдмреЙрдЯ рд╢реБрд░реВ рдХрд┐рдпрд╛ред")

    await update_user_activity(user_id) # TTL рдХреЗ рд▓рд┐рдП рдЕрдВрддрд┐рдо рдЧрддрд┐рд╡рд┐рдзрд┐ рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ

    # рдЪреИрдирд▓ рдЬреЙрдЗрди рдЪреЗрдХ
    if Config.REQUIRED_CHANNEL_ID:
        try:
            member = await context.bot.get_chat_member(Config.REQUIRED_CHANNEL_ID, user_id)
            if member.status in ["member", "administrator", "creator"]:
                await show_main_menu(update, context)
            else:
                await update.message.reply_text(
                    "рдирдорд╕реНрддреЗ! рдЗрд╕ рдмреЙрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ рд╣рдорд╛рд░реЗ рдЪреИрдирд▓ рдХреЛ рдЬреЙрдЗрди рдХрд░реЗрдВ рдФрд░ рдлрд┐рд░ 'рдореИрдВрдиреЗ рдЬреЙрдЗрди рдХрд░ рд▓рд┐рдпрд╛ рд╣реИ' рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред",
                    reply_markup=channel_check_keyboard()
                )
        except Exception as e:
            logger.error(f"рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ {user_id} рдХреЗ рд▓рд┐рдП рдЪреИрдирд▓ рд╕рджрд╕реНрдпрддрд╛ рдХреА рдЬрд╛рдБрдЪ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")
            await update.message.reply_text(
                "рдЪреИрдирд▓ рд╕рджрд╕реНрдпрддрд╛ рдХреА рдЬрд╛рдБрдЪ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдереЛрдбрд╝реА рджреЗрд░ рдмрд╛рдж рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"
            )
            await show_main_menu(update, context) # рдпрджрд┐ рдЪреИрдирд▓ рдЪреЗрдХ рд╡рд┐рдлрд▓ рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ рддреЛ рдореБрдЦреНрдп рдореЗрдиреВ рдкрд░ рд╡рд╛рдкрд╕ рдЬрд╛рдПрдБ
    else:
        await show_main_menu(update, context) # рдпрджрд┐ рдХреЛрдИ рдЪреИрдирд▓ ID рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИ, рддреЛ рд╕реАрдзреЗ рдореБрдЦреНрдп рдореЗрдиреВ рджрд┐рдЦрд╛рдПрдВ

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_data = await get_user_data(user_id)

    # рдореБрдлрд╝реНрдд рд╕реАрдорд╛ рдФрд░ рдЕрд╕реНрдерд╛рдпреА рдлрд╝рд╛рдЗрд▓ рдЪреЗрддрд╛рд╡рдиреА рдХреЗ рд╕рд╛рде рдкреНрд░рд╛рд░рдВрднрд┐рдХ рд╕рдВрджреЗрд╢ рдкреНрд░рджрд░реНрд╢рд┐рдд рдХрд░реЗрдВ
    message_text = (
        "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рдСрд▓-рдЗрди-рд╡рди рдбрд╛рдЙрдирд▓реЛрдбрд░ рдмреЙрдЯ рд╣реВрдБред рдЖрдк рдпрд╣рд╛рдБ Terabox, YouTube "
        "(рд╡реАрдбрд┐рдпреЛ/рдСрдбрд┐рдпреЛ), рдФрд░ Instagram (рд░реАрд▓реНрд╕/рдлреЛрдЯреЛ) рд╕реЗ рдХрдВрдЯреЗрдВрдЯ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред"
        "\n\n**рдорд╣рддреНрд╡рдкреВрд░реНрдг:** рдореБрдлрд╝реНрдд рдореЗрдВ, рдЖрдк рд╣рд░ рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рд╕реЗ рд╕реАрдорд┐рдд рд╕рдВрдЦреНрдпрд╛ рдореЗрдВ рдлрд╛рдЗрд▓реЗрдВ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ:"
        f"\n  ЁЯУе **Terabox:** {Config.FREE_LIMITS['terabox']} рдлрд╛рдЗрд▓реЗрдВ (рд╢реЗрд╖: {Config.FREE_LIMITS['terabox'] - user_data.get('terabox', {}).get('free_count', 0)})"
        f"\n  ЁЯОз **YouTube:** {Config.FREE_LIMITS['youtube']} рдлрд╛рдЗрд▓реЗрдВ (рд╢реЗрд╖: {Config.FREE_LIMITS['youtube'] - user_data.get('youtube', {}).get('free_count', 0)})"
        f"\n  ЁЯУ╕ **Instagram:** {Config.FREE_LIMITS['instagram']} рдлрд╛рдЗрд▓реЗрдВ ( рд╢реЗрд╖: {Config.FREE_LIMITS['instagram'] - user_data.get('instagram', {}).get('free_count', 0)})"
        "\n\nрдХреЙрдкреАрд░рд╛рдЗрдЯ рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд▓рд┐рдП, рдбрд╛рдЙрдирд▓реЛрдб рдХреА рдЧрдИ рдлрд╛рдЗрд▓реЗрдВ 3 рдорд┐рдирдЯ рдореЗрдВ рд╕рд░реНрд╡рд░ рд╕реЗ рдбрд┐рд▓реАрдЯ рд╣реЛ рдЬрд╛рдПрдВрдЧреАред "
        "рдХреГрдкрдпрд╛ рдЗрдиреНрд╣реЗрдВ рддреБрд░рдВрдд рдХрд╣реАрдВ рдФрд░ рдлреЙрд░рд╡рд░реНрдб рдХрд░ рд▓реЗрдВред"
        "\n\nрдЖрдЧреЗ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдЖрдкрдХреЛ рд╣рдорд╛рд░рд╛ **рдкреНрд░реАрдорд┐рдпрдо рд╡рд░реНрдЬрди** рд▓реЗрдирд╛ рд╣реЛрдЧрд╛ред"
    )

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=main_menu_keyboard(),
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=main_menu_keyboard(),
            parse_mode='Markdown'
        )

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    await update_user_activity(user_id) # TTL рдХреЗ рд▓рд┐рдП рдЕрдВрддрд┐рдо рдЧрддрд┐рд╡рд┐рдзрд┐ рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ

    if data == "check_channel":
        if Config.REQUIRED_CHANNEL_ID:
            try:
                member = await context.bot.get_chat_member(Config.REQUIRED_CHANNEL_ID, user_id)
                if member.status in ["member", "administrator", "creator"]:
                    await show_main_menu(update, context)
                else:
                    await query.edit_message_text(
                        "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдЖрдкрдиреЗ рдЕрднреА рддрдХ рдЪреИрдирд▓ рдЬреЙрдЗрди рдирд╣реАрдВ рдХрд┐рдпрд╛ рд╣реИ рдпрд╛ рд╕рджрд╕реНрдпрддрд╛ рдХреА рдкреБрд╖реНрдЯрд┐ рдирд╣реАрдВ рд╣реЛ рдкрд╛рдИ рд╣реИред "
                        "рдХреГрдкрдпрд╛ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдЖрдк рдЪреИрдирд▓ рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛ рдЧрдП рд╣реИрдВ рдФрд░ рдлрд┐рд░ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
                        reply_markup=channel_check_keyboard()
                    )
            except Exception as e:
                logger.error(f"рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ {user_id} рдХреЗ рд▓рд┐рдП рдЪреИрдирд▓ рд╕рджрд╕реНрдпрддрд╛ рдХреА рдкреБрдирдГ рдЬрд╛рдБрдЪ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")
                await query.edit_message_text(
                    "рдЪреИрдирд▓ рд╕рджрд╕реНрдпрддрд╛ рдХреА рдЬрд╛рдБрдЪ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдереЛрдбрд╝реА рджреЗрд░ рдмрд╛рдж рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ рдпрд╛ рдмреЙрдЯ рдХреЛ /start рдХрд░реЗрдВред"
                )
        else:
            await show_main_menu(update, context) # рдпрджрд┐ рдХреЛрдИ рдЪреИрдирд▓ ID рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИ, рддреЛ рдЖрдЧреЗ рдмрдврд╝реЗрдВ

    elif data == "help":
        help_text = (
            "тЭУ **рдмреЙрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХреИрд╕реЗ рдХрд░реЗрдВ:**\n"
            "1.  рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрдиреЛрдВ рдореЗрдВ рд╕реЗ рдЕрдкрдиреА рдкрд╕рдВрдж рдХрд╛ рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рдЪреБрдиреЗрдВ (Terabox, YouTube, Instagram)ред\n"
            "2.  рдЪреБрдиреЗ рд╣реБрдП рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рдХреЗ рд▓рд┐рдП рд▓рд┐рдВрдХ рднреЗрдЬреЗрдВред\n"
            "3.  рдмреЙрдЯ рдЖрдкрдХреА рдлрд╛рдЗрд▓ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рдХреЗ рднреЗрдЬ рджреЗрдЧрд╛ред\n"
            "4.  рдпрд╛рдж рд░рдЦреЗрдВ, рдореБрдлрд╝реНрдд рдбрд╛рдЙрдирд▓реЛрдб рдХреА рд╕реАрдорд╛ рд╣реИ рдФрд░ рдлрд╛рдЗрд▓реЗрдВ рдЕрд╕реНрдерд╛рдпреА рд╣реЛрддреА рд╣реИрдВ (3 рдорд┐рдирдЯ рдореЗрдВ рдбрд┐рд▓реАрдЯ)ред\n"
            "5.  рдЕрдзрд┐рдХ рдбрд╛рдЙрдирд▓реЛрдб рдХреЗ рд▓рд┐рдП 'Premium Version тЬи' рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред"
            "\n\nрдХрд┐рд╕реА рднреА рд╕рдорд╕реНрдпрд╛ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рд╣рдорд╛рд░реЗ рд╕рдкреЛрд░реНрдЯ рдЪреИрдирд▓ рдкрд░ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред" # рдпрд╣рд╛рдБ рд╡реИрдХрд▓реНрдкрд┐рдХ рд░реВрдк рд╕реЗ рд╕рдкреЛрд░реНрдЯ рд▓рд┐рдВрдХ рдЬреЛрдбрд╝реЗрдВ
        )
        await query.edit_message_text(help_text, reply_markup=main_menu_keyboard(), parse_mode='Markdown')

    elif data == "terabox_download":
        user_state[user_id] = "terabox"
        await query.edit_message_text(
            "ЁЯУе **Terabox Video Download:**\nрдЕрдм рдЖрдк Terabox рд▓рд┐рдВрдХ рднреЗрдЬ рд╕рдХрддреЗ рд╣реИрдВред",
            reply_markup=main_menu_keyboard() # рдЖрд╕рд╛рди рдиреЗрд╡рд┐рдЧреЗрд╢рди рдХреЗ рд▓рд┐рдП рдореБрдЦреНрдп рдореЗрдиреВ рд░рдЦреЗрдВ
        )
    elif data == "youtube_download":
        user_state[user_id] = "youtube"
        await query.edit_message_text(
            "ЁЯОз **YouTube Video/Audio Download:**\nрдЕрдм рдЖрдк YouTube рд▓рд┐рдВрдХ рднреЗрдЬ рд╕рдХрддреЗ рд╣реИрдВред",
            reply_markup=main_menu_keyboard()
        )
    elif data == "instagram_download":
        user_state[user_id] = "instagram"
        await query.edit_message_text(
            "ЁЯУ╕ **Instagram Reels/Photo Download:**\nрдЕрдм рдЖрдк Instagram рд▓рд┐рдВрдХ рднреЗрдЬ рд╕рдХрддреЗ рд╣реИрдВред",
            reply_markup=main_menu_keyboard()
        )
    elif data == "premium_version":
        premium_info = (
            "тЬи **рд╣рдорд╛рд░реЗ рдкреНрд░реАрдорд┐рдпрдо рд╡рд░реНрдЬрди рдореЗрдВ рдЕрдкрдЧреНрд░реЗрдб рдХрд░реЗрдВ рдФрд░ рдЕрд╕реАрдорд┐рдд рдбрд╛рдЙрдирд▓реЛрдб рдХрд╛ рдЖрдирдВрдж рд▓реЗрдВ!**\n\n"
            "**Terabox Premium:**\n"
            f"  тАв 50 рдбрд╛рдЙрдирд▓реЛрдб: тВ╣{Config.PREMIUM_PRICES['terabox']['50']}\n"
            f"  тАв 100 рдбрд╛рдЙрдирд▓реЛрдб: тВ╣{Config.PREMIUM_PRICES['terabox']['100']}\n\n"
            "**YouTube Premium:**\n"
            f"  тАв 100 рдбрд╛рдЙрдирд▓реЛрдб: тВ╣{Config.PREMIUM_PRICES['youtube']['100']}\n"
            f"  тАв 200 рдбрд╛рдЙрдирд▓реЛрдб: тВ╣{Config.PREMIUM_PRICES['youtube']['200']}\n\n"
            "**Instagram Premium:**\n"
            f"  тАв 200 рдбрд╛рдЙрдирд▓реЛрдб: тВ╣{Config.PREMIUM_PRICES['instagram']['200']}\n"
            f"  тАв 500 рдбрд╛рдЙрдирд▓реЛрдб: тВ╣{Config.PREMIUM_PRICES['instagram']['500']}\n\n"
            "**рдкреНрд░реАрдорд┐рдпрдо рдХреИрд╕реЗ рд▓реЗрдВ:**\n"
            "рдиреАрдЪреЗ рджрд┐рдП рдЧрдП QR рдХреЛрдб рдХреЛ рд╕реНрдХреИрди рдХрд░реЗрдВ рдпрд╛ UPI ID рдкрд░ рднреБрдЧрддрд╛рди рдХрд░реЗрдВред"
            f"\n\n**UPI ID:** `{Config.UPI_ID}`\n"
            "рднреБрдЧрддрд╛рди рдХреЗ рдмрд╛рдж, 'рдореИрдВрдиреЗ рднреБрдЧрддрд╛рди рдХрд░ рджрд┐рдпрд╛ рд╣реИ ЁЯТ╕' рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ рдФрд░ рдЕрдкрдирд╛ UTR рдирдВрдмрд░ рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВред"
            "\nрд╣рдорд╛рд░реА рдЯреАрдо рдЖрдкрдХреЗ рднреБрдЧрддрд╛рди рдХреА рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдЧреА рдФрд░ рдЖрдкрдХреЗ рдкреНрд░реАрдорд┐рдпрдо рдХреЛ рддреБрд░рдВрдд рд╕рдХреНрд░рд┐рдп рдХрд░ рджреЗрдЧреАред"
        )
        if Config.QR_CODE_IMAGE_URL:
            await context.bot.send_photo(
                chat_id=user_id,
                photo=Config.QR_CODE_IMAGE_URL,
                caption=premium_info,
                reply_markup=premium_keyboard(),
                parse_mode='Markdown'
            )
            await query.delete_message() # рдЕрд╡реНрдпрд╡рд╕реНрдерд╛ рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд▓рд┐рдП рдкреБрд░рд╛рдиреЗ рд╕рдВрджреЗрд╢ рдХреЛ рд╣рдЯрд╛ рджреЗрдВ
        else:
            await query.edit_message_text(
                premium_info,
                reply_markup=premium_keyboard(),
                parse_mode='Markdown'
            )

    elif data == "i_have_paid":
        user_state[user_id] = "awaiting_utr"
        await query.edit_message_text(
            "рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ UTR (Unique Transaction Reference) рдирдВрдмрд░ рджрд░реНрдЬ рдХрд░реЗрдВред "
            "рдЖрдкрдХреА Telegram ID рд╕реНрд╡рддрдГ рдкреНрд░рд╛рдкреНрдд рдХрд░ рд▓реА рдЬрд╛рдПрдЧреАред",
            reply_markup=main_menu_keyboard() # рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдореБрдЦреНрдп рдореЗрдиреВ рдкрд░ рд╡рд╛рдкрд╕ рдЬрд╛рдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рджреЗрдВ
        )
    elif data == "back_to_menu":
        user_state.pop(user_id, None) # рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА рд╕реНрдерд┐рддрд┐ рд╕рд╛рдлрд╝ рдХрд░реЗрдВ
        await show_main_menu(update, context)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    message_text = update.message.text
    chat_id = update.effective_chat.id

    await update_user_activity(user_id) # TTL рдХреЗ рд▓рд┐рдП рдЕрдВрддрд┐рдо рдЧрддрд┐рд╡рд┐рдзрд┐ рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ

    if user_state.get(user_id) == "awaiting_utr":
        utr_number = message_text.strip()
        if not utr_number.isdigit() or len(utr_number) < 6: # рдореВрд▓ UTR рд╕рддреНрдпрд╛рдкрди
            await update.message.reply_text(
                "рдЕрдорд╛рдиреНрдп UTR рдирдВрдмрд░ред рдХреГрдкрдпрд╛ рд╕рд╣реА UTR рдирдВрдмрд░ рджрд░реНрдЬ рдХрд░реЗрдВред",
                reply_markup=main_menu_keyboard()
            )
            return

        # UTR рдХреЛ рдПрдбрдорд┐рди рдЪреИрдирд▓ рдкрд░ рднреЗрдЬреЗрдВ
        if Config.ADMIN_CHANNEL_ID:
            try:
                await context.bot.send_message(
                    chat_id=Config.ADMIN_CHANNEL_ID,
                    text=(
                        f"ЁЯЪи **рдирдИ рдкреНрд░реАрдорд┐рдпрдо рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ!** ЁЯЪи\n"
                        f"**рдпреВрдЬрд╝рд░ Telegram ID:** `{user_id}`\n"
                        f"**UTR рдирдВрдмрд░:** `{utr_number}`\n"
                        f"**рдпреВрдЬрд╝рд░ рд▓рд┐рдВрдХ:** tg://user?id={user_id}"
                    ),
                    parse_mode='Markdown'
                )
                logger.info(f"рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ {user_id} рд╕реЗ UTR {utr_number} рдПрдбрдорд┐рди рдЪреИрдирд▓ рдкрд░ рднреЗрдЬрд╛ рдЧрдпрд╛ред")
                await update.message.reply_text(
                    "рдЖрдкрдХрд╛ UTR рдирдВрдмрд░ рдкреНрд░рд╛рдкреНрдд рд╣реЛ рдЧрдпрд╛ рд╣реИред рд╣рдорд╛рд░реА рдЯреАрдо рдЬрд▓реНрдж рд╣реА рдЗрд╕рдХреА рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдЧреА рдФрд░ рдЖрдкрдХрд╛ рдкреНрд░реАрдорд┐рдпрдо рд╕рдХреНрд░рд┐рдп рдХрд░ рджреЗрдЧреАред рдзрдиреНрдпрд╡рд╛рдж!",
                    reply_markup=main_menu_keyboard()
                )
            except Exception as e:
                logger.error(f"UTR рдХреЛ рдПрдбрдорд┐рди рдЪреИрдирд▓ рдкрд░ рднреЗрдЬрдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")
                await update.message.reply_text(
                    "UTR рдирдВрдмрд░ рднреЗрдЬрдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдереЛрдбрд╝реА рджреЗрд░ рдмрд╛рдж рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ рдпрд╛ рдПрдбрдорд┐рди рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред",
                    reply_markup=main_menu_keyboard()
                )
        else:
            await update.message.reply_text(
                "UTR рдирдВрдмрд░ рдкреНрд░рд╛рдкреНрдд рд╣реЛ рдЧрдпрд╛ рд╣реИ, рд▓реЗрдХрд┐рди рдПрдбрдорд┐рди рдЪреИрдирд▓ рдХреЙрдиреНрдлрд╝рд┐рдЧрд░ рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ рдПрдбрдорд┐рди рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред",
                reply_markup=main_menu_keyboard()
            )
        user_state.pop(user_id, None) # UTR рд╕рдмрдорд┐рд╢рди рдХреЗ рдмрд╛рдж рд╕реНрдерд┐рддрд┐ рд╕рд╛рдлрд╝ рдХрд░реЗрдВ
        return

    # рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА рд╕реНрдерд┐рддрд┐ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдбрд╛рдЙрдирд▓реЛрдб рд▓рд┐рдВрдХ рдХреЛ рд╣реИрдВрдбрд▓ рдХрд░реЗрдВ
    platform = user_state.get(user_id)

    if not platform:
        await update.message.reply_text(
            "рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрдиреЛрдВ рдореЗрдВ рд╕реЗ рдПрдХ рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рдЪреБрдиреЗрдВред",
            reply_markup=main_menu_keyboard()
        )
        return

    user_data = await get_user_data(user_id)
    free_count = user_data.get(platform, {}).get('free_count', 0)
    premium_count = user_data.get(platform, {}).get('premium_count', 0)

    # рд╕реАрдорд╛рдПрдБ рдЬрд╛рдВрдЪреЗрдВ
    if free_count >= Config.FREE_LIMITS.get(platform, 0) and premium_count <= 0:
        await update.message.reply_text(
            f"**рдЖрдкрдХреА рдореБрдлрд╝реНрдд рдбрд╛рдЙрдирд▓реЛрдб рд╕реАрдорд╛ ({Config.FREE_LIMITS.get(platform, 0)} рдлрд╛рдЗрд▓реЗрдВ) рд╕рдорд╛рдкреНрдд рд╣реЛ рдЧрдИ рд╣реИ!** "
            "рдЗрд╕ рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рдкрд░ рдФрд░ рдлрд╛рдЗрд▓реЗрдВ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рд╣рдорд╛рд░рд╛ рдкреНрд░реАрдорд┐рдпрдо рд╡рд░реНрдЬрди рдЦрд░реАрджреЗрдВред "
            "'Premium Version тЬи' рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред",
            reply_markup=main_menu_keyboard(),
            parse_mode='Markdown'
        )
        return

    await update.message.reply_text(f"рд▓рд┐рдВрдХ рдкрд╣рдЪрд╛рди рд░рд╣рд╛ рд╣реВрдБ рдФрд░ рдбрд╛рдЙрдирд▓реЛрдб рд╢реБрд░реВ рдХрд░ рд░рд╣рд╛ рд╣реВрдБ... рдХреГрдкрдпрд╛ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВред")

    file_path = None
    try:
        if platform == "terabox":
            file_path = await download_terabox(message_text)
        elif platform == "youtube":
            file_path = await download_youtube(message_text)
        elif platform == "instagram":
            # Instagram рдбрд╛рдЙрдирд▓реЛрдб рдХреЗ рд▓рд┐рдП рд▓реЙрдЧрд┐рди рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реЛрддреА рд╣реИ, рдЬреЛ рдореБрдлрд╝реНрдд рдмреЙрдЯ рдХреЗ рд▓рд┐рдП рдЬрдЯрд┐рд▓ рд╣реИ
            # рдЗрдВрд╕реНрдЯрд╛рд▓реЛрдбрд░ рдХреЗ рд▓рд┐рдП рдХреЙрдиреНрдлрд╝рд┐рдЧ рдореЗрдВ рдЗрдВрд╕реНрдЯрд╛рдЧреНрд░рд╛рдо рд▓реЙрдЧрд┐рди рд╡рд┐рд╡рд░рдг рдЬреЛрдбрд╝рдиреЗ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВ
            # рдпрд╛ рдпрджрд┐ рдЗрдВрд╕реНрдЯрд╛рд▓реЛрдбрд░ рдмрд╣реБрдд рдореБрд╢реНрдХрд┐рд▓ рд╕рд╛рдмрд┐рдд рд╣реЛрддрд╛ рд╣реИ рддреЛ рдХрд┐рд╕реА рддреГрддреАрдп-рдкрдХреНрд╖ API рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
            file_path = await download_instagram(message_text)
        else:
            await update.message.reply_text("рдЕрд╡реИрдз рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рдЪрдпрдиред")
            user_state.pop(user_id, None)
            return

        if file_path:
            caption = (
                f"ЁЯУе **рдбрд╛рдЙрдирд▓реЛрдб рд╕рдлрд▓!**\n"
                f"рдлрд╝рд╛рдЗрд▓: {os.path.basename(file_path)}\n\n"
                "тЪая╕П **рдорд╣рддреНрд╡рдкреВрд░реНрдг:** рдпрд╣ рдлрд╝рд╛рдЗрд▓ 3 рдорд┐рдирдЯ рдореЗрдВ рд╕рд░реНрд╡рд░ рд╕реЗ рдбрд┐рд▓реАрдЯ рд╣реЛ рдЬрд╛рдПрдЧреАред "
                "рдХреГрдкрдпрд╛ рдЗрд╕реЗ рддреБрд░рдВрдд рдХрд╣реАрдВ рдФрд░ рдлреЙрд░рд╡рд░реНрдб рдХрд░ рд▓реЗрдВ!"
            )
            sent_message = None
            if os.path.getsize(file_path) > 50 * 1024 * 1024: # рд╕реАрдзреЗ рднреЗрдЬрдиреЗ рдХреЗ рд▓рд┐рдП 50 MB рд╕реАрдорд╛, рдмрдбрд╝реЗ рдХреЗ рд▓рд┐рдП рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
                try:
                    sent_message = await update.message.reply_document(
                        document=open(file_path, 'rb'),
                        caption=caption,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.warning(f"рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдХреЗ рд░реВрдк рдореЗрдВ рднреЗрдЬрдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛, рд╡реАрдбрд┐рдпреЛ/рдлреЛрдЯреЛ рдХреЗ рд░реВрдк рдореЗрдВ рдкреНрд░рдпрд╛рд╕ рдХрд░ рд░рд╣рд╛ рд╣реИ: {e}")
                    if file_path.endswith(('.mp4', '.mov', '.avi', '.mkv')):
                        sent_message = await update.message.reply_video(
                            video=open(file_path, 'rb'),
                            caption=caption,
                            parse_mode='Markdown'
                        )
                    elif file_path.endswith(('.jpg', '.jpeg', '.png', '.gif')):
                        sent_message = await update.message.reply_photo(
                            photo=open(file_path, 'rb'),
                            caption=caption,
                            parse_mode='Markdown'
                        )
                    else:
                        raise e # рдЕрдЧрд░ рдлрд┐рд░ рднреА рд╡рд┐рдлрд▓ рд░рд╣рддрд╛ рд╣реИ, рддреЛ рдкреБрдирдГ рдЙрддреНрдкрдиреНрди рдХрд░реЗрдВ
            else: # рдЫреЛрдЯреА рдлрд╝рд╛рдЗрд▓реЛрдВ рдХреЗ рд▓рд┐рдП, рдкрд╣рд▓реЗ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкреНрд░рдХрд╛рд░реЛрдВ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ
                if file_path.endswith(('.mp4', '.mov', '.avi', '.mkv')):
                    sent_message = await update.message.reply_video(
                        video=open(file_path, 'rb'),
                        caption=caption,
                        parse_mode='Markdown'
                    )
                elif file_path.endswith(('.jpg', '.jpeg', '.png', '.gif')):
                    sent_message = await update.message.reply_photo(
                        photo=open(file_path, 'rb'),
                        caption=caption,
                        parse_mode='Markdown'
                    )
                elif file_path.endswith(('.mp3', '.wav', '.ogg')):
                    sent_message = await update.message.reply_audio(
                        audio=open(file_path, 'rb'),
                        caption=caption,
                        parse_mode='Markdown'
                    )
                else:
                    sent_message = await update.message.reply_document( # рджреВрд╕рд░реЛрдВ рдХреЗ рд▓рд┐рдП рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдХреЛ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рдХрд░реЗрдВ
                        document=open(file_path, 'rb'),
                        caption=caption,
                        parse_mode='Markdown'
                    )

            if sent_message:
                # рдлрд╝рд╛рдЗрд▓ рд╣рдЯрд╛рдиреЗ рдХрд╛ рд╢реЗрдбреНрдпреВрд▓ рдХрд░реЗрдВ
                context.job_queue.run_once(
                    lambda context: asyncio.create_task(
                        delete_file_after_delay(file_path, Config.FILE_DELETE_DELAY_MINUTES, context, chat_id, sent_message.message_id)
                    ),
                    Config.FILE_DELETE_DELAY_MINUTES * 60 # рдорд┐рдирдЯ рдХреЛ рд╕реЗрдХрдВрдб рдореЗрдВ рдмрджрд▓реЗрдВ
                )
                await increment_user_downloads(user_id, platform)
                remaining_free = Config.FREE_LIMITS.get(platform, 0) - free_count - 1
                remaining_premium = premium_count - 1
                if remaining_free >= 0:
                    await update.message.reply_text(
                        f"рдЗрд╕ рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рдкрд░ рдЖрдкрдХреЗ **{remaining_free}** рдореБрдлрд╝реНрдд рдбрд╛рдЙрдирд▓реЛрдб рд╢реЗрд╖ рд╣реИрдВред",
                        reply_markup=main_menu_keyboard(),
                        parse_mode='Markdown'
                    )
                elif remaining_premium > 0:
                    await update.message.reply_text(
                        f"рдЗрд╕ рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рдкрд░ рдЖрдкрдХреЗ **{remaining_premium}** рдкреНрд░реАрдорд┐рдпрдо рдбрд╛рдЙрдирд▓реЛрдб рд╢реЗрд╖ рд╣реИрдВред",
                        reply_markup=main_menu_keyboard(),
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text(
                        f"рдЗрд╕ рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рдкрд░ рдЖрдкрдХреА рд╕рднреА рдкреНрд░реАрдорд┐рдпрдо рд▓рд┐рдорд┐рдЯреНрд╕ рднреА рд╕рдорд╛рдкреНрдд рд╣реЛ рдЧрдИ рд╣реИрдВред рдХреГрдкрдпрд╛ рдЕрдзрд┐рдХ рдбрд╛рдЙрдирд▓реЛрдб рдХреЗ рд▓рд┐рдП рдлрд┐рд░ рд╕реЗ рдкреНрд░реАрдорд┐рдпрдо рдЦрд░реАрджреЗрдВред",
                        reply_markup=main_menu_keyboard(),
                        parse_mode='Markdown'
                    )

            else:
                raise Exception("рдЯреЗрд▓реАрдЧреНрд░рд╛рдо рдХреЛ рдлрд╝рд╛рдЗрд▓ рдирд╣реАрдВ рднреЗрдЬ рд╕рдХрд╛ред")

        else:
            await update.message.reply_text("рдбрд╛рдЙрдирд▓реЛрдб рд╡рд┐рдлрд▓ рд░рд╣рд╛ рдпрд╛ рд▓рд┐рдВрдХ рд╕реЗ рдХреЛрдИ рдлрд╛рдЗрд▓ рдирд╣реАрдВ рдорд┐рд▓реАред рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрдз рд▓рд┐рдВрдХ рднреЗрдЬреЗрдВред")

    except Exception as e:
        logger.error(f"рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ {user_id}, рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо {platform} рдХреЗ рд▓рд┐рдП рдбрд╛рдЙрдирд▓реЛрдб рд╣реИрдВрдбрд▓ рдХрд░рддреЗ рд╕рдордп рддреНрд░реБрдЯрд┐: {e}")
        await update.message.reply_text(
            f"рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рддреЗ рд╕рдордп рдПрдХ рддреНрд░реБрдЯрд┐ рд╣реБрдИ: {e}\n"
            "рдХреГрдкрдпрд╛ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рд▓рд┐рдВрдХ рд╕рд╣реА рд╣реИ рдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
            reply_markup=main_menu_keyboard()
        )
    finally:
        # рдпрджрд┐ file_path рдореМрдЬреВрдж рд╣реИ рдФрд░ рд╢реЗрдбреНрдпреВрд▓ рджреНрд╡рд╛рд░рд╛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рднреЗрдЬрд╛/рд╣рдЯрд╛рдпрд╛ рдирд╣реАрдВ рдЧрдпрд╛ рдерд╛, рддреЛ рд╕рд╛рдлрд╝ рдХрд░рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ
        if file_path and os.path.exists(file_path) and 'sent_message' not in locals():
            try:
                os.remove(file_path)
                logger.info(f"рдмрд┐рдирд╛ рднреЗрдЬреА рдЧрдИ рдлрд╝рд╛рдЗрд▓ рд╕рд╛рдлрд╝ рдХреА рдЧрдИ: {file_path}")
            except OSError as e:
                logger.error(f"рдмрд┐рдирд╛ рднреЗрдЬреА рдЧрдИ рдлрд╝рд╛рдЗрд▓ {file_path} рд╕рд╛рдлрд╝ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")
        user_state.pop(user_id, None) # рдбрд╛рдЙрдирд▓реЛрдб рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░рдиреЗ рдХреЗ рдмрд╛рдж рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА рд╕реНрдерд┐рддрд┐ рд╕рд╛рдлрд╝ рдХрд░реЗрдВ


# --- рдПрдбрдорд┐рди рдХрдорд╛рдВрдб рд╣реИрдВрдбрд▓рд░ ---
async def add_premium_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    admin_id = update.effective_user.id

    if str(admin_id) != Config.ADMIN_ID:
        await update.message.reply_text("рдЖрдкрдХреЛ рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИред")
        logger.warning(f"рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ {admin_id} рджреНрд╡рд╛рд░рд╛ /add_premium рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХрд╛ рдЕрдирд╛рдзрд┐рдХреГрдд рдкреНрд░рдпрд╛рд╕")
        return

    args = context.args
    if len(args) != 3:
        await update.message.reply_text(
            "рд╕рд╣реА рдЙрдкрдпреЛрдЧ: `/add_premium <user_telegram_id> <limit_type> <files_count>`\n"
            "рдЙрджрд╛рд╣рд░рдг: `/add_premium 123456789 terabox 50`",
            parse_mode='Markdown'
        )
        return

    try:
        user_id_to_add_premium = int(args[0])
        limit_type = args[1].lower() # terabox, youtube, instagram
        files_count = int(args[2])

        if limit_type not in Config.FREE_LIMITS: # рд╡реИрдз рдкреНрд░рдХрд╛рд░реЛрдВ рдХреЗ рд▓рд┐рдП FREE_LIMITS рдХреБрдВрдЬреА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
            await update.message.reply_text("рдЕрдорд╛рдиреНрдп 'limit_type'ред рдорд╛рдиреНрдп рдкреНрд░рдХрд╛рд░ рд╣реИрдВ: `terabox`, `youtube`, `instagram`ред")
            return
        if files_count <= 0:
            await update.message.reply_text("рдлрд╛рдЗрд▓реЛрдВ рдХреА рд╕рдВрдЦреНрдпрд╛ рдзрдирд╛рддреНрдордХ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдПред")
            return

        await add_premium_downloads(user_id_to_add_premium, limit_type, files_count)

        await update.message.reply_text(
            f"рдпреВрдЬрд╝рд░ `{user_id_to_add_premium}` рдХреЛ `{limit_type}` рдХреЗ рд▓рд┐рдП `{files_count}` рдкреНрд░реАрдорд┐рдпрдо рдбрд╛рдЙрдирд▓реЛрдб рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЬреЛрдбрд╝реЗ рдЧрдП рд╣реИрдВред",
            parse_mode='Markdown'
        )
        logger.info(f"рдПрдбрдорд┐рди {admin_id} рдиреЗ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ {user_id_to_add_premium} рдХреЗ рд▓рд┐рдП {files_count} рдкреНрд░реАрдорд┐рдпрдо {limit_type} рдбрд╛рдЙрдирд▓реЛрдб рдЬреЛрдбрд╝реЗ")

        # рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдЕрдзрд┐рд╕реВрдЪрдирд╛ рднреЗрдЬреЗрдВ
        try:
            total_premium_for_platform = await get_platform_premium_limit(user_id_to_add_premium, limit_type)
            await context.bot.send_message(
                chat_id=user_id_to_add_premium,
                text=(
                    f"ЁЯОЙ **рдмрдзрд╛рдИ рд╣реЛ!** рдЖрдкрдХрд╛ рдкреНрд░реАрдорд┐рдпрдо ({files_count} {limit_type} рдбрд╛рдЙрдирд▓реЛрдб) рдЕрдм рд╕рдХреНрд░рд┐рдп рд╣реЛ рдЧрдпрд╛ рд╣реИред\n"
                    f"рдЖрдкрдХреЗ рдкрд╛рд╕ рдЕрдм рдХреБрд▓ {total_premium_for_platform} {limit_type} рдкреНрд░реАрдорд┐рдпрдо рдбрд╛рдЙрдирд▓реЛрдб рд╢реЗрд╖ рд╣реИрдВред "
                    "рдЖрдк рдЕрдм рдФрд░ рдбрд╛рдЙрдирд▓реЛрдб рдХрд╛ рдЖрдирдВрдж рд▓реЗ рд╕рдХрддреЗ рд╣реИрдВ!"
                ),
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ {user_id_to_add_premium} рдХреЛ рдкреНрд░реАрдорд┐рдпрдо рд╕рдХреНрд░рд┐рдпрдг рд╕рдВрджреЗрд╢ рдирд╣реАрдВ рднреЗрдЬ рд╕рдХрд╛: {e}")

    except ValueError:
        await update.message.reply_text("рдХреГрдкрдпрд╛ рд╕рд╣реА рд╕рдВрдЦреНрдпрд╛рддреНрдордХ Telegram ID рдФрд░ рдлрд╝рд╛рдЗрд▓реЛрдВ рдХреА рд╕рдВрдЦреНрдпрд╛ рджрд░реНрдЬ рдХрд░реЗрдВред")
    except PyMongoError as e:
        logger.error(f"add_premium_command рдореЗрдВ рдбреЗрдЯрд╛рдмреЗрд╕ рддреНрд░реБрдЯрд┐: {e}")
        await update.message.reply_text(f"рдбреЗрдЯрд╛рдмреЗрд╕ рддреНрд░реБрдЯрд┐: {e}")
    except Exception as e:
        logger.error(f"add_premium_command рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")
        await update.message.reply_text(f"рдХрдорд╛рдВрдб рдирд┐рд╖реНрдкрд╛рджрд┐рдд рдХрд░рддреЗ рд╕рдордп рдПрдХ рдЕрдЬреНрдЮрд╛рдд рддреНрд░реБрдЯрд┐ рд╣реБрдИ: {e}")


def main() -> None:
    # рдХреЙрдиреНрдлрд╝рд┐рдЧ рд╕реЗ рдЯреЗрд▓реАрдЧреНрд░рд╛рдо рдмреЙрдЯ рдЯреЛрдХрди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
    token = Config.TELEGRAM_BOT_TOKEN
    if not token:
        logger.error("рдЯреЗрд▓реАрдЧреНрд░рд╛рдо рдмреЙрдЯ рдЯреЛрдХрди рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ Koyeb рдкрд░реНрдпрд╛рд╡рд░рдг рдЪрд░ рдореЗрдВ TELEGRAM_BOT_TOKEN рд╕реЗрдЯ рдХрд░реЗрдВред")
        exit(1)

    # MongoDB рдХрдиреЗрдХреНрд╢рди рдкреНрд░рд╛рд░рдВрдн рдХрд░реЗрдВ
    # рдбреЗрдЯрд╛рдмреЗрд╕ рдЗрдирд┐рд╢рд┐рдпрд▓рд╛рдЗрдЬрд╝реЗрд╢рди (TTL рдЗрдВрдбреЗрдХреНрд╕ рд╕рд╣рд┐рдд) рдкрд╣рд▓реА рдмрд╛рддрдЪреАрдд рдкрд░ рд╣реЛрдЧрд╛
    try:
        initialize_database()
        logger.info("MongoDB рдбреЗрдЯрд╛рдмреЗрд╕ рдХрдиреЗрдХреНрд╢рди рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкреНрд░рд╛рд░рдВрдн рдХрд┐рдпрд╛ рдЧрдпрд╛ред")
    except Exception as e:
        logger.critical(f"MongoDB рдбреЗрдЯрд╛рдмреЗрд╕ рдкреНрд░рд╛рд░рдВрдн рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛: {e}")
        exit(1) # рдпрджрд┐ рдбреЗрдЯрд╛рдмреЗрд╕ рдХрдиреЗрдХреНрд╢рди рд╡рд┐рдлрд▓ рд░рд╣рддрд╛ рд╣реИ рддреЛ рдмрд╛рд╣рд░ рдирд┐рдХрд▓реЗрдВ

    # 'Updater' рдХреЛ рд╣рдЯрд╛рдХрд░ 'Application' рд╕реАрдзреЗ рдмрд┐рд▓реНрдб рдХрд░реЗрдВ
    # рддреНрд░реБрдЯрд┐ рд╕рдВрджреЗрд╢ рдХреЛ рджреЗрдЦрддреЗ рд╣реБрдП, рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рдирд╛ рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИ рдХрд┐ `Updater` рдХрд╛ рдЙрдкрдпреЛрдЧ рдпрд╣рд╛рдБ рди рд╣реЛред
    application = Application.builder().token(token).build()

    # --- рд╣реИрдВрдбрд▓рд░реНрд╕ ---
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CommandHandler("add_premium", add_premium_command)) # рдПрдбрдорд┐рди рдХрдорд╛рдВрдб

    # рдмреЙрдЯ рдЪрд▓рд╛рдПрдВ
    logger.info("рдмреЙрдЯ рдкреЛрд▓рд┐рдВрдЧ рд╢реБрд░реВ рд╣реЛ рдЧрдпрд╛ рд╣реИ...")
    # рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ `Updater` рдХрд╛ рдХреЛрдИ рдЬрд┐рдХреНрд░ рдирд╣реАрдВ рд╣реИ, рдХреЗрд╡рд▓ `application` рдкрд░ рд╕реАрдзреЗ `run_polling` рдХреЙрд▓ рдХрд░реЗрдВред
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()

